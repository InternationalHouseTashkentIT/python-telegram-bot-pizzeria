import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler
import user

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

token = "6128693331:AAHX8Pf-jv2krN9XnAtqCPPdostQjAJ0x2c"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–µ–º—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏."""

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.
    user.init_user(update.effective_user.username)

    keyboard = [
        [
            InlineKeyboardButton("üìñ –ú–µ–Ω—é", callback_data="to_menu_page"),
            InlineKeyboardButton("üß∫ –ö–æ—Ä–∑–∏–Ω–∞", callback_data="to_basket_page"),
        ],
        # [InlineKeyboardButton("–û–ø—Ü–∏—è 3", callback_data="3")],
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏", reply_markup=reply_markup)


async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Parses the CallbackQuery and updates the message text."""
    query = update.callback_query

    # CallbackQueries –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–µ–Ω—ã, –¥–∞–∂–µ –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.
    # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç –∏—Å–ø—ã—Ç—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ. –°–º. https://core.telegram.org/bots/api#callbackquery
    await query.answer()

    user_name = update.effective_user.username

    if query.data == "to_menu_page":
        markup = user.generate_menu_markup(user_name)
        await query.edit_message_text(text="–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é", reply_markup=markup)

    elif query.data == "to_basket_page":
        data = user.generate_basket_markup_data(user_name)
        await query.edit_message_text(text=data["message"], reply_markup=data["markup"])

    elif query.data == "clear_basket":
        data = user.generate_basket_markup_data(user_name, True)
        await query.edit_message_text(text=data["message"], reply_markup=data["markup"])

    elif "to_product_" in query.data:
        # –û–±—Ä–µ–∑–∞–µ–º —Å—Ç—Ä–æ–∫—É - –ø–æ–ª—É—á–∞–µ–º id –ø—Ä–æ–¥—É–∫—Ç–∞
        product_id = query.data[11:]
        data = user.generate_product_markup_data(user_name, product_id)

        await query.edit_message_text(text=data["message"],
            reply_markup=data["markup"],
            parse_mode="html"
        )

    elif "order_product_" in query.data:
        # –û–±—Ä–µ–∑–∞–µ–º —Å—Ç—Ä–æ–∫—É - –ø–æ–ª—É—á–∞–µ–º id –ø—Ä–æ–¥—É–∫—Ç–∞
        product_id = query.data[14:]

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
        user.add_product_to_basket(user_name, product_id)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ
        data = user.generate_order_markup_data(user_name, product_id)

        await query.edit_message_text(text=data["message"], reply_markup=data["markup"], parse_mode="html")

    else:
        await query.edit_message_text(text=f"–í–∞—à –æ—Ç–≤–µ—Ç: {query.data}")

app = ApplicationBuilder().token(token).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(button))

app.run_polling()

