"""–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
import os
import json

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler

def init_user(username: str):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã
    
    :param username: –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
    :return: None
    """

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
    current_dir = os.path.dirname(os.path.abspath(__file__))

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    target_dir = os.path.join(current_dir, "users", username)

    # –°–æ–∑–¥–∞–µ–º –ª–∏—á–Ω—É—é –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    if os.path.exists(target_dir):
        print(f"–ü–∞–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    else:
        os.mkdir(target_dir)
        print(f"–ü–∞–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —Å–æ–∑–¥–∞–Ω–∞.")

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
        fp = open(f"{target_dir}/basket.json", "w")
        json.dump({}, fp)
        fp.close()
        print("–ö–æ—Ä–∑–∏–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞.")

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
        os.mkdir(f"{target_dir}/orders")
        print("–ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ —Å–æ–∑–¥–∞–Ω–∞.")

def read_goods():
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
    current_dir = os.path.dirname(os.path.abspath(__file__))

    fp = open(f"{current_dir}/goods.json", "r")
    goods = json.load(fp)
    fp.close()
    return goods


def generate_menu_markup(user_id: str):
    """
    –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –º–µ–Ω—é.
    """
    keyboard = []

    goods = read_goods()

    for product_id in goods:
        product_name = goods[product_id]["name"]
        keyboard.append( [InlineKeyboardButton(product_name, callback_data=f"to_product_{product_id}")] )

    keyboard.append( [InlineKeyboardButton("üß∫ –ü–µ—Ä–µ–π—Ç–∏ –∫ –ö–æ—Ä–∑–∏–Ω–µ", callback_data=f"to_basket_page")] )

    reply_markup = InlineKeyboardMarkup(keyboard)

    return reply_markup


def generate_product_markup_data(user_id: str, product_id: str):
    """
    –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞.
    """

    goods = read_goods()

    product_name = goods[product_id]["name"]
    product_description = goods[product_id]["description"]
    product_price = goods[product_id]["price"]

    message = f"<b>{product_name}</b>\n\n{product_description}\n\n<b>–¶–µ–Ω–∞</b>: {product_price}"

    goods_count = calculate_all_basket_goods(user_id)

    keyboard = [
        [InlineKeyboardButton(f"‚¨áÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"order_product_{product_id}")],
        [InlineKeyboardButton("üìñ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ú–µ–Ω—é", callback_data="to_menu_page")],
        [InlineKeyboardButton(f"üß∫ –ü–µ—Ä–µ–π—Ç–∏ –∫ –ö–æ—Ä–∑–∏–Ω–µ (–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:{goods_count})", callback_data="to_basket_page")]
    ]

    markup = InlineKeyboardMarkup(keyboard)

    return {
        "message": message,
        "markup": markup
    }


def generate_order_markup_data(user_id: str, product_id: str):
    """
    –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –æ –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ.
    """

    goods = read_goods()

    product_name = goods[product_id]["name"]

    message = "–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É " + product_name

    goods_count = calculate_all_basket_goods(user_id)

    keyboard = [
        [InlineKeyboardButton(f"üîÅ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–≤—Ç–æ—Ä–Ω–æ", callback_data=f"order_product_{product_id}")],
        [InlineKeyboardButton("üìñ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ú–µ–Ω—é", callback_data="to_menu_page")],
        [InlineKeyboardButton(f"üß∫ –ü–µ—Ä–µ–π—Ç–∏ –∫ –ö–æ—Ä–∑–∏–Ω–µ (–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {goods_count})", callback_data="to_basket_page")]
    ]

    markup = InlineKeyboardMarkup(keyboard)

    return {
        "message": message,
        "markup": markup
    }


def clear_user_basket(user_id: str):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
    current_dir = os.path.dirname(os.path.abspath(__file__))

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    target_dir = os.path.join(current_dir, "users", user_id)

    fp = open(f"{target_dir}/basket.json", "w")
    json.dump({}, fp)
    fp.close()

    return {}


def read_basket(user_id: str):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
    current_dir = os.path.dirname(os.path.abspath(__file__))

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    target_dir = os.path.join(current_dir, "users", user_id)

    fp = open(f"{target_dir}/basket.json", "r")
    user_basket = json.load(fp)
    fp.close()

    return user_basket


def format_basket_data(data: dict):
    goods = read_goods()

    formatted_data = {}

    for product_id in data:
        formatted_data[product_id] = {
            "name": goods[product_id]["name"],
            "amount": data[product_id],
            "total_cost": goods[product_id]["price"] * data[product_id],
        }

    order_total_cost = 0
    for item in formatted_data:
        order_total_cost += formatted_data[item]["total_cost"]

    return {
        "total_cost": order_total_cost,
        "goods_info": formatted_data
    }

def calculate_all_basket_goods(user_id: str):
    user_basket = read_basket(user_id)

    goods_count = 0

    for product_id in user_basket:
        goods_count += user_basket[product_id]

    return goods_count    


def add_product_to_basket(user_id: str, product_id: str):
    user_basket = read_basket(user_id)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
    current_dir = os.path.dirname(os.path.abspath(__file__))

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    target_dir = os.path.join(current_dir, "users", user_id)

    user_basket[product_id] = (user_basket.get(product_id) or 0) + 1

    fp = open(f"{target_dir}/basket.json", "w")
    json.dump(user_basket, fp)
    fp.close()
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª –≤ –∫–æ—Ä–∑–∏–Ω—É {product_id}")


def generate_basket_markup_data(user_id: str, isClear=False):
    keyboard = [
        [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_basket")],
        [InlineKeyboardButton("üìñ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ú–µ–Ω—é", callback_data="to_menu_page")]
    ]

    basket = {}
    if isClear:
        basket = clear_user_basket(user_id)
    else:
        basket = read_basket(user_id)

    formatted_basket = format_basket_data(basket)

    total_cost = formatted_basket["total_cost"]
    goods_info = formatted_basket["goods_info"]

    message = f"–ü—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ:\n\n–ò—Ç–æ–≥–æ: {total_cost}\n\n"

    for product in goods_info:
        product_name = goods_info[product]["name"]
        product_amount = goods_info[product]["amount"]
        message = message + f"{product_name}: {product_amount}\n\n"

    markup = InlineKeyboardMarkup(keyboard)

    return {
        "message": message,
        "markup": markup,
    }
